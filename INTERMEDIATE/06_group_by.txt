SQL aggregate function like COUNT, AVG, and SUM have something in common: they all aggregate across the entire table. 
But what if you want to aggregate only part of a table? 
For example, you might want to count the number of entries for each year.

In situations like this, you'd need to use the GROUP BY clause. 
GROUP BY allows you to separate data into groups, which can be aggregated independently of one another. 

GROUP BY column numbers
As with ORDER BY, you can substitute numbers for column names in the GROUP BY clause. 
It's generally recommended to do this only when you're grouping many columns, 
or if something else is causing the text in the GROUP BY clause to be excessively long

Using GROUP BY with ORDER BY
The order of column names in your GROUP BY clause doesn't matter—the results will be the same regardless. 
If you want to control how the aggregations are grouped together, use ORDER BY. 

Using GROUP BY with LIMIT
There's one thing to be aware of as you group by multiple columns: SQL evaluates the aggregations before the LIMIT clause. 
If you don't group by any columns, you'll get a 1-row result—no problem there. 
If you group by a column with enough unique values that it exceeds the LIMIT number, the aggregates will be calculated, 
and then some rows will simply be omitted from the results.

This is actually a nice way to do things because you know you're going to get the correct aggregates. 
If SQL cuts the table down to 100 rows, then performed the aggregations, your results would be substantially different. 
